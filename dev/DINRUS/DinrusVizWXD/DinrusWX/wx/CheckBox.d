module wx.CheckBox;
public import wx.common;
public import wx.Control;

public enum ПСостояниеЧекБокса
{
    НеУст,
    Уст,
    Неопр
}

//---------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxCheckBox_ctor();
extern (C) бул   wxCheckBox_Create(ЦелУкз сам, ЦелУкз родитель, цел ид, ткст ярлык, inout Точка поз, inout Размер размер, бцел стиль, ЦелУкз знач, ткст имя);
extern (C) бул   wxCheckBox_GetValue(ЦелУкз сам);
extern (C) проц   wxCheckBox_SetValue(ЦелУкз сам, бул состояние);
extern (C) бул   wxCheckBox_IsChecked(ЦелУкз сам);

extern (C) ПСостояниеЧекБокса wxCheckBox_Get3StateValue(ЦелУкз сам);
extern (C) проц wxCheckBox_Set3StateValue(ЦелУкз сам, ПСостояниеЧекБокса состояние);
extern (C) бул wxCheckBox_Is3State(ЦелУкз сам);
extern (C) бул wxCheckBox_Is3rdStateAllowedForUser(ЦелУкз сам);
//! \endcond

//---------------------------------------------------------------------

export class ЧекБокс : Контрол
{
    public const цел ДВА_СОСТОЯНИЯ           = 0x0000;
    public const цел ТРИ_СОСТОЯНИЯ           = 0x1000;
    public const цел ПОЗВОЛИТЬ_ТРЕТЬЕ_СОСТОЯНИЕ_ПОЛЬЗОВАТЕЛЮ           = 0x2000;
    public const ткст СтрИмениЧекБокса = "checkbox";

    export this(ЦелУкз объ)
    {
        super(объ);
    }

    export this()
    {
        this(wxCheckBox_ctor());
    }

    export this(Окно родитель, цел ид, ткст ярлык, Точка поз = ДЕФПОЗ, Размер размер = ДЕФРАЗМ, цел стиль =0, Оценщик знач=пусто, ткст имя = СтрИмениЧекБокса)
    {
        this(wxCheckBox_ctor());
        if (!wxCheckBox_Create(вхобъ, ВизОбъект.безопУк(родитель), ид,
                               ярлык, поз, размер, cast(бцел)стиль, ВизОбъект.безопУк(знач), имя))
        {
            throw new ИсклНевернОперации("Не удалось создать ЧекБокс");
        }
    }

    export static ВизОбъект Нов(ЦелУкз объ)
    {
        return new ЧекБокс(объ);
    }

    //---------------------------------------------------------------------
    // ctors with сам created ид

    export this(Окно родитель, ткст ярлык, Точка поз = ДЕФПОЗ, Размер размер = ДЕФРАЗМ, цел стиль =0, Оценщик знач=пусто, ткст имя = СтрИмениЧекБокса)
    {
        this(родитель, Окно.уникИд, ярлык, поз, размер, стиль, знач, имя);
    }

    //---------------------------------------------------------------------

    export бул создай(Окно родитель, цел ид, ткст ярлык, inout Точка поз, inout Размер размер,
                       цел стиль, Оценщик знач, ткст имя)
    {
        return wxCheckBox_Create(this.м_вхобъ, ВизОбъект.безопУк(родитель), ид,
                                 ярлык, поз, размер, cast(бцел)стиль, ВизОбъект.безопУк(знач), имя);
    }

    //---------------------------------------------------------------------

    export бул значение()
    {
        return wxCheckBox_GetValue(this.м_вхобъ);
    }

    export проц значение(бул значение)
    {
        wxCheckBox_SetValue(this.м_вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export бул установлен()
    {
        return wxCheckBox_IsChecked(this.м_вхобъ);
    }

    //---------------------------------------------------------------------

    export ПСостояниеЧекБокса трёхСтатЗнач()
    {
        return wxCheckBox_Get3StateValue(this.м_вхобъ);
    }

    export проц трёхСтатЗнач(ПСостояниеЧекБокса значение)
    {
        wxCheckBox_Set3StateValue(this.м_вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export бул трёхСтат_ли()
    {
        return wxCheckBox_Is3State(this.м_вхобъ);
    }

    //---------------------------------------------------------------------

    export бул трёхСтатПозволенПользователю()
    {
        return wxCheckBox_Is3rdStateAllowedForUser(this.м_вхобъ);
    }

    //---------------------------------------------------------------------

    export проц добавьНажат(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ЧЕКБОКС_НАЖАТ, ид, значение, this);
    }

    export проц удалиНажат(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }
}
