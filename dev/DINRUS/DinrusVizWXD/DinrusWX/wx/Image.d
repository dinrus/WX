module wx.Image;
public import wx.common;
public import wx.Defs;
//public import wx.Bitmap;
public import wx.Palette;
public import wx.Colour;

//! \cond EXTERN
extern (C) ЦелУкз wxImage_ctor();
extern (C) ЦелУкз wxImage_ctorByName(ткст имя, ПТипБитмап тип);
extern (C) ЦелУкз wxImage_ctorintintbool(цел ширь, цел высь, бул очистить);
extern (C) ЦелУкз wxImage_ctorByData(цел ширь, цел высь, ббайт* данные, бул статдан);
extern (C) ЦелУкз wxImage_ctorByDataAlpha(цел ширь, цел высь, ббайт* данные, ббайт* альфа, бул статдан);
extern (C) ЦелУкз wxImage_ctorByImage(ЦелУкз рисунок);
extern (C) ЦелУкз wxImage_ctorByByteArray(ЦелУкз данные, цел length, ПТипБитмап тип);
extern (C) проц   wxImage_dtor(ЦелУкз сам);

extern (C) проц   wxImage_Destroy(ЦелУкз сам);

extern (C) цел    wxImage_GetHeight(ЦелУкз сам);
extern (C) цел    wxImage_GetWidth(ЦелУкз сам);
extern (C) проц   wxImage_InitAllHandlers();
extern (C) проц   wxImage_Rescale(ЦелУкз сам, цел ширь, цел высь);
extern (C) ЦелУкз wxImage_Scale(ЦелУкз сам, цел ширь, цел высь);

extern (C) проц   wxImage_SetMask(ЦелУкз сам, бул маска);
extern (C) бул   wxImage_HasMask(ЦелУкз сам);
extern (C) проц   wxImage_SetMaskColour(ЦелУкз сам, ббайт к, ббайт з, ббайт с);

extern (C) бул   wxImage_LoadFileByTypeId(ЦелУкз сам, ткст имя, ПТипБитмап тип, цел индекс);
extern (C) бул   wxImage_LoadFileByMimeTypeId(ЦелУкз сам, ткст имя, ткст маймТип, цел индекс);
extern (C) бул   wxImage_SaveFileByType(ЦелУкз сам, ткст имя, ПТипБитмап тип);
extern (C) бул   wxImage_SaveFileByMimeType(ЦелУкз сам, ткст имя, ткст маймТип);

extern (C) ЦелУкз wxImage_Copy(ЦелУкз сам);
extern (C) ЦелУкз wxImage_GetSubImage(ЦелУкз сам, inout Прямоугольник прям);

extern (C) проц   wxImage_Paste(ЦелУкз сам, ЦелУкз рисунок, цел x, цел y);

extern (C) ЦелУкз wxImage_ShrinkBy(ЦелУкз сам, цел шФактор, цел вФактор);

extern (C) ЦелУкз wxImage_Rotate(ЦелУкз сам, дво угол, inout Точка центрВращения, бул интерполирующ, inout Точка смещениеПослеВращения);
extern (C) ЦелУкз wxImage_Rotate90(ЦелУкз сам, бул по_часовой);
extern (C) ЦелУкз wxImage_Mirror(ЦелУкз сам, бул горизонтально);

extern (C) проц   wxImage_Replace(ЦелУкз сам, ббайт r1, ббайт g1, ббайт b1, ббайт r2, ббайт g2, ббайт b2);

extern (C) ЦелУкз wxImage_ConvertToMono(ЦелУкз сам, ббайт к, ббайт з, ббайт с);

extern (C) проц   wxImage_SetRGB(ЦелУкз сам, цел x, цел y, ббайт к, ббайт з, ббайт с);

extern (C) ббайт   wxImage_GetRed(ЦелУкз сам, цел x, цел y);
extern (C) ббайт   wxImage_GetGreen(ЦелУкз сам, цел x, цел y);
extern (C) ббайт   wxImage_GetBlue(ЦелУкз сам, цел x, цел y);

extern (C) проц   wxImage_SetAlpha(ЦелУкз сам, цел x, цел y, ббайт альфа);
extern (C) ббайт   wxImage_GetAlpha(ЦелУкз сам, цел x, цел y);

extern (C) бул   wxImage_FindFirstUnusedColour(ЦелУкз сам, inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК, ббайт стартЗ, ббайт стартС);
extern (C) бул   wxImage_SetMaskFromImage(ЦелУкз сам, ЦелУкз маска, ббайт mr, ббайт mg, ббайт mb);

extern (C) бул   wxImage_ConvertAlphaToMask(ЦелУкз сам, ббайт порог);

extern (C) бул   wxImage_CanRead(ткст имя);
extern (C) цел    wxImage_GetImageCount(ткст имя, цел тип);

extern (C) бул   wxImage_Ok(ЦелУкз сам);
//--Alex
extern (C) ббайт   wxImage_GetMaskRed(ЦелУкз сам);
extern (C) ббайт   wxImage_GetMaskGreen(ЦелУкз сам);
extern (C) ббайт   wxImage_GetMaskBlue(ЦелУкз сам);

extern (C) бул   wxImage_HasPalette(ЦелУкз сам);
extern (C) ЦелУкз wxImage_GetPalette(ЦелУкз сам);
extern (C) проц   wxImage_SetPalette(ЦелУкз сам, ЦелУкз палитра);

extern (C) проц   wxImage_SetOption(ЦелУкз сам, ткст имя, ткст значение);
extern (C) проц   wxImage_SetOption2(ЦелУкз сам, ткст имя, цел значение);
extern (C) ЦелУкз wxImage_GetOption(ЦелУкз сам, ткст имя);
extern (C) цел    wxImage_GetOptionInt(ЦелУкз сам, ткст имя);
extern (C) бул   wxImage_HasOption(ЦелУкз сам, ткст имя);

extern (C) бцел  wxImage_CountColours(ЦелУкз сам, бцел стопПосле);

extern (C) бцел  wxImage_ComputeHistogram(ЦелУкз сам, ЦелУкз h);

extern (C) ЦелУкз wxImage_GetHandlers();
extern (C) проц   wxImage_AddHandler(ЦелУкз обработчик);
extern (C) проц   wxImage_InsertHandler(ЦелУкз обработчик);
extern (C) бул   wxImage_RemoveHandler(ткст имя);
extern (C) ЦелУкз wxImage_FindHandler(ткст имя);
extern (C) ЦелУкз wxImage_FindHandler2(ткст имя, бцел типРис);
extern (C) ЦелУкз wxImage_FindHandler3(бцел типРис);
extern (C) ЦелУкз wxImage_FindHandlerMime(ткст маймТип);

extern (C) ЦелУкз wxImage_GetImageExtWildcard();

extern (C) проц   wxImage_CleanUpHandlers();

extern (C) проц   wxImage_InitStandardHandlers();
//! \endcond

//---------------------------------------------------------------------

export class Рисунок : ВизОбъект
{
    private static бул обработчикиЗагружены = нет;

    export static проц иницВсеОбработчики()
    {
        // We only want до load the рисунок handlers once.
        if (!обработчикиЗагружены)
        {
            wxImage_InitAllHandlers();
            обработчикиЗагружены = да;
        }
    }

    static this()
    {
        иницВсеОбработчики();
    }

    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    export this()
    {
        this(wxImage_ctor());
    }

    export this(ткст имя)
    {
        this(wxImage_ctorByName(имя, ПТипБитмап.ЛЮБОЙ));
    }

    export this(цел ширь, цел высь)
    {
        this(ширь, высь, да);
    }

    export this(byte[] данные, ПТипБитмап тип)
    {
        this(wxImage_ctorByByteArray(cast(ЦелУкз)данные.ptr, данные.length, тип));
    }

    export this(цел ширь, цел высь, бул очистить)
    {
        this(wxImage_ctorintintbool(ширь, высь, очистить));
    }

    export this(цел ширь, цел высь, ббайт *данные, бул статдан)
    {
        this(wxImage_ctorByData(ширь, высь, данные, статдан));
    }

    export this(цел ширь, цел высь, ббайт *данные, ббайт *альфа, бул статдан)
    {
        this(wxImage_ctorByDataAlpha(ширь, высь, данные, альфа, статдан));
    }

    export this(Рисунок рисунок)
    {
        this(wxImage_ctorByImage(ВизОбъект.безопУк(рисунок)));
    }

    export static ВизОбъект Нов(ЦелУкз ptr)
    {
        return new Рисунок(ptr);
    }

    //---------------------------------------------------------------------

    export проц разрушь()
    {
        wxImage_Destroy(вхобъ);
    }

    //---------------------------------------------------------------------

    export цел ширь()
    {
        return wxImage_GetWidth(вхобъ);
    }
    export цел высь()
    {
        return wxImage_GetHeight(вхобъ);
    }
    export Размер размер()
    {
        return Размер(ширь,высь);
    }

    //---------------------------------------------------------------------

    export бул загрузиФайл(ткст путь)
    {
        return загрузиФайл(путь, ПТипБитмап.ЛЮБОЙ, -1);
    }

    export бул загрузиФайл(ткст путь, ПТипБитмап тип)
    {
        return загрузиФайл(путь, тип, -1);
    }

    export бул загрузиФайл(ткст путь, ПТипБитмап тип, цел индекс)
    {
        return wxImage_LoadFileByTypeId(вхобъ, путь, тип, -1);
    }

    //---------------------------------------------------------------------

    export бул загрузиФайл(ткст имя, ткст маймТип)
    {
        return загрузиФайл(имя, маймТип, -1);
    }

    export бул загрузиФайл(ткст имя, ткст маймТип, цел индекс)
    {
        return wxImage_LoadFileByMimeTypeId(вхобъ, имя, маймТип, индекс);
    }

    //---------------------------------------------------------------------

    export бул сохраниФайл(ткст путь)
    {
        return сохраниФайл(путь, ПТипБитмап.ЛЮБОЙ);
    }

    export бул сохраниФайл(ткст путь, ПТипБитмап тип)
    {
        return wxImage_SaveFileByType(вхобъ, путь, тип);
    }

    //---------------------------------------------------------------------

    export бул сохраниФайл(ткст имя, ткст маймТип)
    {
        return wxImage_SaveFileByMimeType(вхобъ, имя, маймТип);
    }

    //---------------------------------------------------------------------

    export Рисунок ремасштабруй(цел ширь, цел высь)
    {
        wxImage_Rescale(вхобъ, ширь, высь);
        return this;
    }

    //---------------------------------------------------------------------

    export Рисунок масштабируй(цел ширь, цел высь)
    {
        return new Рисунок(wxImage_Scale(вхобъ, ширь, высь));
    }

    //---------------------------------------------------------------------

    export проц устЦветМаски(ббайт к, ббайт з, ббайт с)
    {
        wxImage_SetMaskColour(вхобъ, к, з, с);
    }

    //---------------------------------------------------------------------

    export проц цветМаски(Цвет значение)
    {
        устЦветМаски(значение.красный, значение.зелёный, значение.синий);
    }

    //---------------------------------------------------------------------

    export проц маска(бул значение)
    {
        wxImage_SetMask(вхобъ, значение);
    }
    export бул маска()
    {
        return wxImage_HasMask(вхобъ);
    }

    //---------------------------------------------------------------------

    export Рисунок копируй()
    {
        return new Рисунок(wxImage_Copy(вхобъ));
    }

    //---------------------------------------------------------------------

    export Рисунок субРисунок(Прямоугольник прям)
    {
        return cast(Рисунок)найдиОбъект(wxImage_GetSubImage(вхобъ, прям), &Рисунок.Нов);
    }

    //---------------------------------------------------------------------

    export проц вставь(Рисунок рисунок, цел x, цел y)
    {
        wxImage_Paste(вхобъ, ВизОбъект.безопУк(рисунок), x, y);
    }

    //---------------------------------------------------------------------

    export Рисунок сожмиНа(цел шФактор, цел вФактор)
    {
        return new Рисунок(wxImage_ShrinkBy(вхобъ, шФактор, вФактор));
    }

    //---------------------------------------------------------------------

    export Рисунок вращай(дво угол, Точка центрВращения)
    {
        Точка dummy;
        return вращай(угол, центрВращения, да, dummy);
    }

    export Рисунок вращай(дво угол, Точка центрВращения, бул интерполирующ)
    {
        Точка dummy;
        return вращай(угол, центрВращения, интерполирующ, dummy);
    }

    export Рисунок вращай(дво угол, Точка центрВращения, бул интерполирующ, Точка смещениеПослеВращения)
    {
        return new Рисунок(wxImage_Rotate(вхобъ, угол, центрВращения, интерполирующ, смещениеПослеВращения));
    }

    //---------------------------------------------------------------------

    export Рисунок вращай90()
    {
        return вращай90(да);
    }

    export Рисунок вращай90(бул по_часовой)
    {
        return new Рисунок(wxImage_Rotate90(вхобъ, по_часовой));
    }

    //---------------------------------------------------------------------

    export Рисунок зеркало()
    {
        return зеркало(да);
    }

    export Рисунок зеркало(бул горизонтально)
    {
        return new Рисунок(wxImage_Mirror(вхобъ, горизонтально));
    }

    //---------------------------------------------------------------------

    export проц замени(ббайт r1, ббайт g1, ббайт b1, ббайт r2, ббайт g2, ббайт b2)
    {
        wxImage_Replace(вхобъ, r1, g1, b1, r2, g2, b2);
    }

    //---------------------------------------------------------------------

    export проц преобразуйВМоно(ббайт к, ббайт з, ббайт с)
    {
        wxImage_ConvertToMono(вхобъ, к, з, с);
    }

    //---------------------------------------------------------------------

    export проц устКЗС(цел x, цел y, ббайт к, ббайт з, ббайт с)
    {
        wxImage_SetRGB(вхобъ, x, y, к, з, с);
    }

    //---------------------------------------------------------------------

    export ббайт дайКрасный(цел x, цел y)
    {
        return wxImage_GetRed(вхобъ, x, y);
    }

    //---------------------------------------------------------------------

    export ббайт дайЗелёный(цел x, цел y)
    {
        return wxImage_GetGreen(вхобъ, x, y);
    }

    //---------------------------------------------------------------------

    export ббайт дайСиний(цел x, цел y)
    {
        return wxImage_GetBlue(вхобъ, x, y);
    }

    //---------------------------------------------------------------------

    export проц устАльфу(цел x, цел y, ббайт альфа)
    {
        wxImage_SetAlpha(вхобъ, x, y, альфа);
    }

    //---------------------------------------------------------------------

    export ббайт дайАльфу(цел x, цел y)
    {
        return wxImage_GetAlpha(вхобъ, x, y);
    }

    //---------------------------------------------------------------------

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с)
    {
        return найдиПервНеиспЦвет(к, з, с, 1, 0, 0);
    }

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК)
    {
        return найдиПервНеиспЦвет(к, з, с, стартК, 0, 0);
    }

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК, ббайт стартЗ)
    {
        return найдиПервНеиспЦвет(к, з, с, стартК, стартЗ, 0);
    }

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК, ббайт стартЗ, ббайт стартС)
    {
        return wxImage_FindFirstUnusedColour(вхобъ, к, з, с, стартК, стартЗ, стартС);
    }

    //---------------------------------------------------------------------

    export бул устМаскуИзРисунка(Рисунок маска, ббайт mr, ббайт mg, ббайт mb)
    {
        return wxImage_SetMaskFromImage(вхобъ, ВизОбъект.безопУк(маска), mr, mg, mb);
    }

    //---------------------------------------------------------------------

    export бул преобразуйАльфуВМаску()
    {
        return преобразуйАльфуВМаску(128);
    }

    export бул преобразуйАльфуВМаску(ббайт порог)
    {
        return wxImage_ConvertAlphaToMask(вхобъ, порог);
    }

    //---------------------------------------------------------------------

    export static бул читается(ткст имя)
    {
        return wxImage_CanRead(имя);
    }

    //---------------------------------------------------------------------

    export static цел дайЧлоРисунков(ткст имя)
    {
        return дайЧлоРисунков(имя, ПТипБитмап.ЛЮБОЙ);
    }

    export static цел дайЧлоРисунков(ткст имя, ПТипБитмап тип)
    {
        return wxImage_GetImageCount(имя, cast(цел)тип);
    }

    //---------------------------------------------------------------------

    export бул Ок()
    {
        return wxImage_Ok(вхобъ);
    }

    //---------------------------------------------------------------------

    export ббайт маскаК()
    {
        return wxImage_GetMaskRed(вхобъ);
    }

    //---------------------------------------------------------------------

    export ббайт маскаЗ()
    {
        return wxImage_GetMaskGreen(вхобъ);
    }

    //---------------------------------------------------------------------

    export ббайт маскаС()
    {
        return wxImage_GetMaskBlue(вхобъ);
    }

    //---------------------------------------------------------------------

    export бул естьПалитра()
    {
        return wxImage_HasPalette(вхобъ);
    }

    //---------------------------------------------------------------------

    export Палитра палитра()
    {
        return cast(Палитра)найдиОбъект(wxImage_GetPalette(вхобъ), &Палитра.Нов);
    }
    export проц палитра(Палитра значение)
    {
        wxImage_SetPalette(вхобъ, ВизОбъект.безопУк(значение));
    }

    //---------------------------------------------------------------------

    export проц устОпцию(ткст имя, ткст значение)
    {
        wxImage_SetOption(вхобъ, имя, значение);
    }

    //---------------------------------------------------------------------

    export проц устОпцию(ткст имя, цел значение)
    {
        wxImage_SetOption2(вхобъ, имя, значение);
    }

    //---------------------------------------------------------------------

    export ткст дайОпцию(ткст имя)
    {
        return cast(ткст) new ВизТкст(wxImage_GetOption(вхобъ, имя), да);
    }

    //---------------------------------------------------------------------

    export цел дайЦелОпц(ткст имя)
    {
        return wxImage_GetOptionInt(вхобъ, имя);
    }

    //---------------------------------------------------------------------

    export бул естьОпц(ткст имя)
    {
        return wxImage_HasOption(вхобъ, имя);
    }

    //---------------------------------------------------------------------

    export бцел члоЦветов()
    {
        return члоЦветов(бцел.max-1);
    }

    //---------------------------------------------------------------------

    export бцел члоЦветов(бцел стопПосле)
    {
        return wxImage_CountColours(вхобъ, стопПосле);
    }

    //---------------------------------------------------------------------

    export бцел рассчитайГистограмму(ГистограммаРисунка h)
    {
        return wxImage_ComputeHistogram(вхобъ, ВизОбъект.безопУк(h));
    }

    //---------------------------------------------------------------------

    /*
    // doesn't work. ОбработчикРисунка is an abstract class...
    static СписокМассивов Handlers() {
    		wxList wl = new wxList(wxImage_GetHandlers());
    		СписокМассивов al = new СписокМассивов();

    		for (цел i = 0; i < wl.счёт; i++)
            	al.добавь(new ОбработчикРисунка(wl.элт(i)));

    		return wl;
    	}
    */

    //---------------------------------------------------------------------

    export static проц добавьОбработчик(ОбработчикРисунка обработчик)
    {
        wxImage_AddHandler(ВизОбъект.безопУк(обработчик));
    }

    //---------------------------------------------------------------------

    export static проц вставьОбработчик(ОбработчикРисунка обработчик)
    {
        wxImage_InsertHandler(ВизОбъект.безопУк(обработчик));
    }

    //---------------------------------------------------------------------

    export static бул удалиОбработчик(ткст имя)
    {
        return wxImage_RemoveHandler(имя);
    }

    //---------------------------------------------------------------------

    export static ОбработчикРисунка найдиОбработчик(ткст имя)
    {
        return cast(ОбработчикРисунка)найдиОбъект(wxImage_FindHandler(имя));
    }

    //---------------------------------------------------------------------

    export static ОбработчикРисунка найдиОбработчик(ткст расширение, цел типРис)
    {
        return cast(ОбработчикРисунка)найдиОбъект(wxImage_FindHandler2(расширение, cast(бцел)типРис));
    }

    //---------------------------------------------------------------------

    export static ОбработчикРисунка найдиОбработчик(цел типРис)
    {
        return cast(ОбработчикРисунка)найдиОбъект(wxImage_FindHandler3(cast(бцел)типРис));
    }

    //---------------------------------------------------------------------

    export static ОбработчикРисунка найдиМаймОбработчика(ткст маймТип)
    {
        return cast(ОбработчикРисунка)найдиОбъект(wxImage_FindHandlerMime(маймТип));
    }

    //---------------------------------------------------------------------

    static ткст расшУайлдкардРисунка()
    {
        return cast(ткст) new ВизТкст(wxImage_GetImageExtWildcard(), да);
    }

    //---------------------------------------------------------------------

    export static проц зачистьОбработчики()
    {
        wxImage_CleanUpHandlers();
    }

    //---------------------------------------------------------------------

    export static проц иницСтандартнОбработчики()
    {
        wxImage_InitStandardHandlers();
    }
}

//---------------------------------------------------------------------

//! \cond EXTERN
extern (C) проц   wxImageHandler_SetName(ЦелУкз сам, ткст имя);
extern (C) проц   wxImageHandler_SetExtension(ЦелУкз сам, ткст ext);
extern (C) проц   wxImageHandler_SetType(ЦелУкз сам, бцел тип);
extern (C) проц   wxImageHandler_SetMimeType(ЦелУкз сам, ткст тип);
extern (C) ЦелУкз wxImageHandler_GetName(ЦелУкз сам);
extern (C) ЦелУкз wxImageHandler_GetExtension(ЦелУкз сам);
extern (C) бцел   wxImageHandler_GetType(ЦелУкз сам);
extern (C) ЦелУкз wxImageHandler_GetMimeType(ЦелУкз сам);
//! \endcond

//---------------------------------------------------------------------

export class ОбработчикРисунка : ВизОбъект
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    //---------------------------------------------------------------------

    export ткст имя()
    {
        return cast(ткст) new ВизТкст(wxImageHandler_GetName(вхобъ), да);
    }
    export проц имя(ткст значение)
    {
        wxImageHandler_SetName(вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export ткст расширение()
    {
        return cast(ткст) new ВизТкст(wxImageHandler_GetExtension(вхобъ), да);
    }
    export проц расширение(ткст значение)
    {
        wxImageHandler_SetExtension(вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export цел тип()
    {
        return cast(цел)wxImageHandler_GetType(вхобъ);
    }
    export проц тип(цел значение)
    {
        wxImageHandler_SetType(вхобъ, cast(бцел)значение);
    }

    //---------------------------------------------------------------------

    export ткст маймтип()
    {
        return cast(ткст) new ВизТкст(wxImageHandler_GetMimeType(вхобъ), да);
    }
    export проц маймтип(ткст значение)
    {
        wxImageHandler_SetMimeType(вхобъ, значение);
    }
}

//---------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxImageHistogramEntry_ctor();
extern (C) проц   wxImageHistogramEntry_dtor(ЦелУкз сам);
extern (C) бцел  wxImageHistogramEntry_index(ЦелУкз сам);
extern (C) проц   wxImageHistogramEntry_Setindex(ЦелУкз сам, бцел v);
extern (C) бцел  wxImageHistogramEntry_value(ЦелУкз сам);
extern (C) проц   wxImageHistogramEntry_Setvalue(ЦелУкз сам, бцел v);
//! \endcond

//---------------------------------------------------------------------

export class ЗаписьГистограммыРисунка : ВизОбъект
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    private this(ЦелУкз вхобъ, бул памСобств)
    {
        super(вхобъ);
        this.памСобств = памСобств;
    }

    export this()
    {
        this(wxImageHistogramEntry_ctor(), да);
    }

    //---------------------------------------------------------------------

    override protected проц dtor()
    {
        wxImageHistogramEntry_dtor(вхобъ);
    }
	//----------------------------
		export ~this(){this.dtor();}
	//----------------------------
    //---------------------------------------------------------------------

    export бцел индекс()
    {
        return wxImageHistogramEntry_index(вхобъ);
    }
    export проц индекс(бцел значение)
    {
        wxImageHistogramEntry_Setindex(вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export бцел значение()
    {
        return wxImageHistogramEntry_value(вхобъ);
    }
    export проц значение(бцел значение)
    {
        wxImageHistogramEntry_Setvalue(вхобъ, значение);
    }
}

//---------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxImageHistogram_ctor();
extern (C) проц   wxImageHistogram_dtor(ЦелУкз сам);
extern (C) бцел  wxImageHistogram_MakeKey(ббайт к, ббайт з, ббайт с);
extern (C) бул   wxImageHistogram_FindFirstUnusedColour(ЦелУкз сам, inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК, ббайт стартЗ, ббайт стартС);
//! \endcond

//---------------------------------------------------------------------

export class ГистограммаРисунка : ВизОбъект
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    export this()
    {
        this(wxImageHistogram_ctor());
    }

    //---------------------------------------------------------------------

    export static бцел сделайКлюч(ббайт к, ббайт з, ббайт с)
    {
        return wxImageHistogram_MakeKey(к, з, с);
    }

    //---------------------------------------------------------------------

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с)
    {
        return найдиПервНеиспЦвет(к, з, с, 1, 0, 0);
    }

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК)
    {
        return найдиПервНеиспЦвет(к, з, с, стартК, 0, 0);
    }

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК, ббайт стартЗ)
    {
        return найдиПервНеиспЦвет(к, з, с, стартК, стартЗ, 0);
    }

    export бул найдиПервНеиспЦвет(inout ббайт к, inout ббайт з, inout ббайт с, ббайт стартК, ббайт стартЗ, ббайт стартС)
    {
        return wxImageHistogram_FindFirstUnusedColour(вхобъ, к, з, с, стартК, стартЗ, стартС);
    }
}
