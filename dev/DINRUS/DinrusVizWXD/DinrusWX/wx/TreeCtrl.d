module wx.TreeCtrl;
public import wx.common;
public import wx.Control;
public import wx.ClientData;
public import wx.ImageList;
public import wx.KeyEvent;

public enum ПИконкаЭлтаДерева
{
    Нормальный,
    Выделенная,
    Развёрнутая,
    ВыделеннаяРазвёрнутая,
    Макс
}

//-----------------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxTreeItemData_ctor();
extern (C) проц   wxTreeItemData_RegisterDisposable(ЦелУкз сам, Virtual_Dispose onDispose);
extern (C) проц   wxTreeItemData_dtor(ЦелУкз сам);
extern (C) ЦелУкз wxTreeItemData_GetId(ЦелУкз сам);
extern (C) проц   wxTreeItemData_SetId(ЦелУкз сам, ЦелУкз парам);
//! \endcond

//-----------------------------------------------------------------------------

export class ДанныеЭлтаДерева : ДанныеКлиента
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    private this(ЦелУкз вхобъ, бул памСобств)
    {
        super(вхобъ);
        this.памСобств = памСобств;
    }

    export this()
    {
        this(wxTreeItemData_ctor(), да);
        wxTreeItemData_RegisterDisposable(вхобъ, &VirtualDispose);
    }

    //---------------------------------------------------------------------
    override protected проц dtor()
    {
        wxTreeItemData_dtor(вхобъ);
    }
	//----------------------------
		export ~this(){this.dtor();}
	//----------------------------
    //-----------------------------------------------------------------------------

    export ИдЭлтаДерева ид()
    {
        return new ИдЭлтаДерева(wxTreeItemData_GetId(вхобъ), да);
    }
    export проц ид(ИдЭлтаДерева значение)
    {
        wxTreeItemData_SetId(вхобъ, ВизОбъект.безопУк(значение));
    }
}

//-----------------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxTreeItemAttr_ctor();
extern (C) ЦелУкз wxTreeItemAttr_ctor2(ЦелУкз цвТекст, ЦелУкз цвФон, ЦелУкз шрифт);
extern (C) проц   wxTreeItemAttr_dtor(ЦелУкз сам);
extern (C) проц   wxTreeItemAttr_RegisterDisposable(ЦелУкз сам, Virtual_Dispose onDispose);
extern (C) проц   wxTreeItemAttr_SetTextColour(ЦелУкз сам, ЦелУкз цвТекст);
extern (C) проц   wxTreeItemAttr_SetBackgroundColour(ЦелУкз сам, ЦелУкз цвФон);
extern (C) проц   wxTreeItemAttr_SetFont(ЦелУкз сам, ЦелУкз шрифт);
extern (C) бул   wxTreeItemAttr_HasTextColour(ЦелУкз сам);
extern (C) бул   wxTreeItemAttr_HasBackgroundColour(ЦелУкз сам);
extern (C) бул   wxTreeItemAttr_HasFont(ЦелУкз сам);
extern (C) ЦелУкз wxTreeItemAttr_GetTextColour(ЦелУкз сам);
extern (C) ЦелУкз wxTreeItemAttr_GetBackgroundColour(ЦелУкз сам);
extern (C) ЦелУкз wxTreeItemAttr_GetFont(ЦелУкз сам);
//! \endcond

//-----------------------------------------------------------------------------

export class АтрЭлтаДерева : ВизОбъект
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    private this(ЦелУкз вхобъ, бул памСобств)
    {
        super(вхобъ);
        this.памСобств = памСобств;
    }

    export this()
    {
        this(wxTreeItemAttr_ctor(), да);
        wxTreeItemAttr_RegisterDisposable(вхобъ, &VirtualDispose);
    }

    export this(Цвет цвТекст, Цвет цвФон, Шрифт шрифт)
    {
        this(wxTreeItemAttr_ctor2(ВизОбъект.безопУк(цвТекст), ВизОбъект.безопУк(цвФон), ВизОбъект.безопУк(шрифт)), да);
        wxTreeItemAttr_RegisterDisposable(вхобъ, &VirtualDispose);
    }

    //---------------------------------------------------------------------

    override protected проц dtor()
    {
        wxTreeItemAttr_dtor(вхобъ);
    }
	//----------------------------
		export ~this(){this.dtor();}
	//----------------------------
    //---------------------------------------------------------------------

    export Цвет цветТекста()
    {
        return new Цвет(wxTreeItemAttr_GetTextColour(вхобъ), да);
    }
    export проц цветТекста(Цвет значение)
    {
        wxTreeItemAttr_SetTextColour(вхобъ, ВизОбъект.безопУк(значение));
    }

    //---------------------------------------------------------------------

    export Цвет цветФона()
    {
        return new Цвет(wxTreeItemAttr_GetBackgroundColour(вхобъ), да);
    }
    export проц цветФона(Цвет значение)
    {
        wxTreeItemAttr_SetBackgroundColour(вхобъ, ВизОбъект.безопУк(значение));
    }

    //---------------------------------------------------------------------

    export Шрифт шрифт()
    {
        return new Шрифт(wxTreeItemAttr_GetFont(вхобъ), да);
    }
    export проц шрифт(Шрифт значение)
    {
        wxTreeItemAttr_SetFont(вхобъ, ВизОбъект.безопУк(значение));
    }

    //---------------------------------------------------------------------

    export бул естьЦветТекста()
    {
        return wxTreeItemAttr_HasTextColour(вхобъ);
    }

    //---------------------------------------------------------------------

    export бул естьЦветФона()
    {
        return wxTreeItemAttr_HasBackgroundColour(вхобъ);
    }

    //---------------------------------------------------------------------

    export бул естьШрифт()
    {
        return wxTreeItemAttr_HasFont(вхобъ);
    }
}

//-----------------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxTreeItemId_ctor();
extern (C) ЦелУкз wxTreeItemId_ctor2(ук pItem);
extern (C) проц   wxTreeItemId_dtor(ЦелУкз сам);
extern (C) проц   wxTreeItemId_RegisterDisposable(ЦелУкз сам, Virtual_Dispose onDispose);
extern (C) бул   wxTreeItemId_Equal(ЦелУкз элт1, ЦелУкз элт2);
extern (C) бул   wxTreeItemId_IsOk(ЦелУкз сам);
//! \endcond

//---------------------------------------------------------------------

//[StructLayout(LayoutKind.Sequential)]
export class ИдЭлтаДерева : ВизОбъект
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    private this(ЦелУкз вхобъ, бул памСобств)
    {
        super(вхобъ);
        this.памСобств = памСобств;
        wxTreeItemId_RegisterDisposable(вхобъ, &VirtualDispose);
    }

    export this()
    {
        this(wxTreeItemId_ctor(), да);
    }

    export this(/*ДанныеКлиента*/ук pItem)
    {
        this(wxTreeItemId_ctor2(pItem), да);
    }

    //---------------------------------------------------------------------

    override protected проц dtor()
    {
        wxTreeItemId_dtor(вхобъ);
    }
	//----------------------------
		export ~this(){this.dtor();}
	//----------------------------
    //---------------------------------------------------------------------

    //-----------------------------------------------------------------------------

    /*private ЦелУкз ид;

    export this(ЦелУкз ид)
    { this.ид = ид; }*/

    //-----------------------------------------------------------------------------

    version (D_Version2) // changed in DMD 2.016
    {
        export override бул opEquals(Объект o)
        {
            if (o is пусто) return нет;
            ИдЭлтаДерева ид = cast(ИдЭлтаДерева)o;
            if (ид is пусто) return нет;
            if (ид is this || вхобъ == ид.вхобъ) return да;
            return wxTreeItemId_Equal(вхобъ, ид.вхобъ);
        }
    }
    else // D_Version1
    {
        export override цел opEquals(Объект o)
        {
            if (o is пусто) return нет;
            ИдЭлтаДерева ид = cast(ИдЭлтаДерева)o;
            if (ид is пусто) return нет;
            if (ид is this || вхобъ == ид.вхобъ) return да;
            return wxTreeItemId_Equal(вхобъ, ид.вхобъ);
        }
    }

    //-----------------------------------------------------------------------------

    export override т_хэш вХэш()
    {
        return cast(т_хэш)вхобъ;
    }

    //-----------------------------------------------------------------------------

    /*export бул IsValid
    {
    	get { return ид != ЦелУкз.init; }
    }*/

    //-----------------------------------------------------------------------------

    export бул Ок()
    {
        return wxTreeItemId_IsOk(вхобъ);
    }
}

//-----------------------------------------------------------------------------

//! \cond EXTERN
extern (C)
{
    alias цел function(ДеревоКтрл объ, ЦелУкз элт1, ЦелУкз элт2) Virtual_OnCompareItems;
}

extern (C) бцел   wxTreeCtrl_GetDefaultStyle();
extern (C) ЦелУкз wxTreeCtrl_ctor();
extern (C) проц   wxTreeCtrl_RegisterVirtual(ЦелУкз сам,ДеревоКтрл объ, Virtual_OnCompareItems onCompareItems);
extern (C) цел    wxTreeCtrl_OnCompareItems(ЦелУкз сам, ЦелУкз элт1, ЦелУкз элт2);
extern (C) ЦелУкз wxTreeCtrl_AddRoot(ЦелУкз сам, ткст текст, цел рисунок, цел выделенРис, ЦелУкз данные);
extern (C) ЦелУкз wxTreeCtrl_AppendItem(ЦелУкз сам, ЦелУкз родитель, ткст текст, цел рисунок, цел выделенРис, ЦелУкз данные);
extern (C) проц   wxTreeCtrl_AssignImageList(ЦелУкз сам, ЦелУкз списокРисунков);
extern (C) проц   wxTreeCtrl_AssignStateImageList(ЦелУкз сам, ЦелУкз списокРисунков);
//extern (C) проц   wxTreeCtrl_AssignButtonsImageList(ЦелУкз сам, ЦелУкз списокРисунков);
extern (C) бул   wxTreeCtrl_Create(ЦелУкз сам, ЦелУкз родитель, цел ид, inout Точка поз, inout Размер размер, бцел стиль, ЦелУкз знач, ткст имя);
extern (C) ЦелУкз wxTreeCtrl_GetImageList(ЦелУкз сам);
extern (C) ЦелУкз wxTreeCtrl_GetStateImageList(ЦелУкз сам);
//extern (C) ЦелУкз wxTreeCtrl_GetButtonsImageList(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_SetImageList(ЦелУкз сам, ЦелУкз списокРисунков);
extern (C) проц   wxTreeCtrl_SetStateImageList(ЦелУкз сам, ЦелУкз списокРисунков);
//extern (C) проц   wxTreeCtrl_SetButtonsImageList(ЦелУкз сам, ЦелУкз списокРисунков);
extern (C) проц   wxTreeCtrl_SetItemImage(ЦелУкз сам, ЦелУкз элт, цел рисунок, ПИконкаЭлтаДерева который);
extern (C) цел    wxTreeCtrl_GetItemImage(ЦелУкз сам, ЦелУкз элт, ПИконкаЭлтаДерева который);

extern (C) проц   wxTreeCtrl_DeleteAllItems(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_Delete(ЦелУкз сам, ЦелУкз элт);
extern (C) проц   wxTreeCtrl_DeleteChildren(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_Unselect(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_UnselectAll(ЦелУкз сам);

extern (C) бул   wxTreeCtrl_IsSelected(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetSelection(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_SelectItem(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_GetItemText(ЦелУкз сам, ЦелУкз элт);
extern (C) проц   wxTreeCtrl_SetItemText(ЦелУкз сам, ЦелУкз элт, ткст текст);

extern (C) ЦелУкз wxTreeCtrl_HitTest(ЦелУкз сам, inout Точка тчк, inout цел флаги);

extern (C) проц   wxTreeCtrl_SetItemData(ЦелУкз сам, ЦелУкз элт, ЦелУкз данные);
extern (C) ЦелУкз wxTreeCtrl_GetItemData(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_GetRootItem(ЦелУкз сам);
extern (C) ЦелУкз wxTreeCtrl_GetItemParent(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_GetFirstChild(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetNextChild(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetLastChild(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_GetNextSibling(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetPrevSibling(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_GetFirstVisibleItem(ЦелУкз сам);
extern (C) ЦелУкз wxTreeCtrl_GetNextVisible(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetPrevVisible(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_Expand(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_Collapse(ЦелУкз сам, ЦелУкз элт);
extern (C) проц   wxTreeCtrl_CollapseAndReset(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_Toggle(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_EnsureVisible(ЦелУкз сам, ЦелУкз элт);
extern (C) проц   wxTreeCtrl_ScrollTo(ЦелУкз сам, ЦелУкз элт);

extern (C) цел    wxTreeCtrl_GetChildrenCount(ЦелУкз сам, ЦелУкз элт, бул рекурсивно);
extern (C) цел    wxTreeCtrl_GetCount(ЦелУкз сам);

extern (C) бул   wxTreeCtrl_IsVisible(ЦелУкз сам, ЦелУкз элт);

extern (C) бул   wxTreeCtrl_ItemHasChildren(ЦелУкз сам, ЦелУкз элт);

extern (C) бул   wxTreeCtrl_IsExpanded(ЦелУкз сам, ЦелУкз элт);

extern (C) бцел   wxTreeCtrl_GetIndent(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_SetIndent(ЦелУкз сам, бцел indent);

extern (C) бцел   wxTreeCtrl_GetSpacing(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_SetSpacing(ЦелУкз сам, бцел indent);

extern (C) ЦелУкз wxTreeCtrl_GetItemTextColour(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetItemBackgroundColour(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeCtrl_GetItemFont(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_SetItemHasChildren(ЦелУкз сам, ЦелУкз элт, бул есть);
extern (C) проц   wxTreeCtrl_SetItemBold(ЦелУкз сам, ЦелУкз элт, бул полужирный);
extern (C) проц   wxTreeCtrl_SetItemTextColour(ЦелУкз сам, ЦелУкз элт, ЦелУкз кол);
extern (C) проц   wxTreeCtrl_SetItemBackgroundColour(ЦелУкз сам, ЦелУкз элт, ЦелУкз кол);

extern (C) проц   wxTreeCtrl_EditLabel(ЦелУкз сам, ЦелУкз элт);

extern (C) бул   wxTreeCtrl_GetBoundingRect(ЦелУкз сам, ЦелУкз элт, inout Прямоугольник прям, бул толькоТекст);

extern (C) ЦелУкз wxTreeCtrl_InsertItem(ЦелУкз сам, ЦелУкз родитель, ЦелУкз idPrevious, ткст текст, цел рисунок, цел selectedImage, ЦелУкз данные);
extern (C) ЦелУкз wxTreeCtrl_InsertItem2(ЦелУкз сам, ЦелУкз родитель, цел перед, ткст текст, цел рисунок, цел selectedImage, ЦелУкз данные);

extern (C) бул   wxTreeCtrl_IsBold(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_PrependItem(ЦелУкз сам, ЦелУкз родитель, ткст текст, цел рисунок, цел selectedImage, ЦелУкз данные);

extern (C) проц   wxTreeCtrl_SetItemSelectedImage(ЦелУкз сам, ЦелУкз элт, цел выделенРис);

extern (C) проц   wxTreeCtrl_ToggleItemSelection(ЦелУкз сам, ЦелУкз элт);

extern (C) проц   wxTreeCtrl_UnselectItem(ЦелУкз сам, ЦелУкз элт);

extern (C) ЦелУкз wxTreeCtrl_GetMyCookie(ЦелУкз сам);
extern (C) проц   wxTreeCtrl_SetMyCookie(ЦелУкз сам, ЦелУкз newval);

extern (C) ЦелУкз wxTreeCtrl_GetSelections(ЦелУкз сам);

extern (C) проц   wxTreeCtrl_SetItemFont(ЦелУкз сам, ЦелУкз элт, ЦелУкз шрифт);
extern (C) проц   wxTreeCtrl_SortChildren(ЦелУкз сам, ЦелУкз элт);
//! \endcond

//---------------------------------------------------------------------

export class ДеревоКтрл : Контрол
{
    public const цел БЕЗ_КНОПОК                = 0x0000;
    public const цел С_КНОПКАМИ                = 0x0001;
    public const цел КНОПКИ_ТВИСТ            = 0x0010;
    public const цел БЕЗ_СТРОК                    = 0x0004;
    public const цел СТРОКИ_В_КОРНЕ             = 0x0008;
    public const цел КНОПКИ_МАК                = 0; // deprecated
    public const цел КНОПКИ_АКВА                = 0; // deprecated

    public const цел ЕДИНИЧНЫЙ                    = 0x0000;
    public const цел МНОЖЕСТВЕННЫЙ                    = 0x0020;
    public const цел РАСШИРЕННЫЙ                    = 0x0040;
    public const цел ПОЛНАЯ_ПОДСВЕТКА_РЯДА         = 0x2000;

    public const цел РЕДАКТИРУЕМЫЕ_ЯРЛЫКИ                = 0x0200;
    public const цел СТРОКИ_РЯДА                = 0x0400;
    public const цел КОРЕНЬ_СКРЫТ                = 0x0800;
    public const цел ИЗМЕНЯЕМАЯ_ВЫСОТА_РЯДА    = 0x0080;

    public static цел ДЕФ_СТИЛЬ;

    static this()
    {
        ДЕФ_СТИЛЬ    = wxTreeCtrl_GetDefaultStyle();
    }

    //-----------------------------------------------------------------------------

    public const цел ХТ_НАД           = 0x0001;
    public const цел ХТ_НИЖЕ           = 0x0002;
    public const цел ХТ_НИГДЕ         = 0x0004;
    public const цел ХТ_НАКНОПКЕЭЛТА    = 0x0008;
    public const цел ХТ_НАИКОНКЕЭЛТА      = 0x0010;
    public const цел ХТ_НАОТСТУПЕЭЛТА    = 0x0020;
    public const цел ХТ_НАЯРЛЫКЕЭЛТА     = 0x0040;
    public const цел ХТ_СПРАВАОТЭЛТА     = 0x0080;
    public const цел ХТ_НАИКОНКЕСОСТОЯНИЯЭЛТА = 0x0100;
    public const цел ХТ_ЛЕВЕЕ          = 0x0200;
    public const цел ХТ_ПРАВЕЕ         = 0x0400;
    public const цел ХТ_ВВЕРХНЕЙЧАСТИЭЛТА = 0x0800;
    public const цел ХТ_ВНИЖНЕЙЧАСТИЭЛТА = 0x1000;

    public const цел ХТ_НАЭЛТЕ = ХТ_НАИКОНКЕЭЛТА | ХТ_НАЯРЛЫКЕЭЛТА;

    public const ткст СтрИмениДеревоКтрл = "treeCtrl";
    //-----------------------------------------------------------------------------

    export static цел дефСтиль(){return ДеревоКтрл.ДЕФ_СТИЛЬ;}

    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    export this()
    {
        this(wxTreeCtrl_ctor());
        wxTreeCtrl_RegisterVirtual(вхобъ, this, &staticDoOnCompareItems);
    }

    export this(Окно родитель, цел ид /*= ЛЮБОЙ*/, Точка поз = ДЕФПОЗ, Размер размер = ДЕФРАЗМ, цел стиль = С_КНОПКАМИ | СТРОКИ_В_КОРНЕ, Оценщик знач = пусто, ткст имя = СтрИмениДеревоКтрл)
    {
        this();
        if (!создай(родитель, ид, поз, размер, стиль, знач, имя))
        {
            throw new ИсклНевернОперации("Не удалось создать ДеревоКтрл");
        }
    }

    export static ВизОбъект Нов(ЦелУкз вхобъ)
    {
        return new ДеревоКтрл(вхобъ);
    }

    //---------------------------------------------------------------------
    // ctors with сам created ид

    export this(Окно родитель, Точка поз = ДЕФПОЗ, Размер размер = ДЕФРАЗМ, цел стиль = С_КНОПКАМИ | СТРОКИ_В_КОРНЕ, Оценщик знач = пусто, ткст имя = СтрИмениДеревоКтрл)
    {
        this(родитель, Окно.уникИд, поз, размер, стиль, знач, имя);
    }

    //---------------------------------------------------------------------

    export бул создай(Окно родитель, цел ид, inout Точка поз, inout Размер размер, цел стиль, Оценщик знач, ткст имя)
    {
        return wxTreeCtrl_Create(вхобъ, ВизОбъект.безопУк(родитель), ид, поз, размер, cast(бцел)стиль, ВизОбъект.безопУк(знач), имя);
    }

    //---------------------------------------------------------------------

    static export extern (C) private цел staticDoOnCompareItems(ДеревоКтрл объ, ЦелУкз элт1, ЦелУкз элт2)
    {
        return объ.приСравненииЭлтов(new ИдЭлтаДерева(элт1, да), new ИдЭлтаДерева(элт2, да));
    }

    export  цел приСравненииЭлтов(ИдЭлтаДерева элт1, ИдЭлтаДерева элт2)
    {
        return wxTreeCtrl_OnCompareItems(вхобъ, ВизОбъект.безопУк(элт1), ВизОбъект.безопУк(элт2));
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева добавьКорень(ткст текст)
    {
        return добавьКорень(текст, -1, -1, пусто);
    }

    export ИдЭлтаДерева добавьКорень(ткст текст, цел рисунок)
    {
        return добавьКорень(текст, рисунок, -1, пусто);
    }

    export ИдЭлтаДерева добавьКорень(ткст текст, цел рисунок, цел выделенРис)
    {
        return добавьКорень(текст, рисунок, выделенРис, пусто);
    }

    export ИдЭлтаДерева добавьКорень(ткст текст, цел рисунок, цел выделенРис, ДанныеЭлтаДерева данные)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_AddRoot(вхобъ, текст, рисунок, выделенРис, ВизОбъект.безопУк(данные)), да);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева приставьЭлт(ИдЭлтаДерева идРодителя, ткст текст)
    {
        return приставьЭлт(идРодителя, текст, -1, -1, пусто);
    }

    export ИдЭлтаДерева приставьЭлт(ИдЭлтаДерева идРодителя, ткст текст, цел рисунок)
    {
        return приставьЭлт(идРодителя, текст, рисунок, -1, пусто);
    }

    export ИдЭлтаДерева приставьЭлт(ИдЭлтаДерева идРодителя, ткст текст, цел рисунок, цел выделенРис)
    {
        return приставьЭлт(идРодителя, текст, рисунок, выделенРис, пусто);
    }

    export ИдЭлтаДерева приставьЭлт(ИдЭлтаДерева идРодителя, ткст текст, цел рисунок, цел выделенРис, ДанныеЭлтаДерева данные)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_AppendItem(вхобъ, ВизОбъект.безопУк(идРодителя), текст, рисунок, выделенРис, ВизОбъект.безопУк(данные)), да);
    }

    //---------------------------------------------------------------------

    export проц присвойСписокРисунков(СписокРисунков списокРисунков)
    {
        wxTreeCtrl_AssignImageList(вхобъ, ВизОбъект.безопУк(списокРисунков));
    }

    //---------------------------------------------------------------------

    export проц присвойСписокРисСостояния(СписокРисунков списокРисунков)
    {
        wxTreeCtrl_AssignStateImageList(вхобъ, ВизОбъект.безопУк(списокРисунков));
    }

    //---------------------------------------------------------------------

    /*export проц AssignButtonsImageList(СписокРисунков списокРисунков)
    {
    	wxTreeCtrl_AssignButtonsImageList(вхобъ, ВизОбъект.безопУк(списокРисунков));
    }*/

    //---------------------------------------------------------------------

    export СписокРисунков списокРисунков()
    {
        return cast(СписокРисунков)найдиОбъект(wxTreeCtrl_GetImageList(вхобъ), &СписокРисунков.Нов);
    }

    export проц списокРисунков(СписокРисунков значение)
    {
        wxTreeCtrl_SetImageList(вхобъ, ВизОбъект.безопУк(значение));
    }

    //---------------------------------------------------------------------

    export проц устСписокРисунков(СписокРисунков списокРисунков)
    {
        wxTreeCtrl_SetImageList(вхобъ, ВизОбъект.безопУк(списокРисунков));
    }

    //---------------------------------------------------------------------

    export СписокРисунков списокРисСостояния()
    {
        return cast(СписокРисунков)найдиОбъект(wxTreeCtrl_GetStateImageList(вхобъ), &СписокРисунков.Нов);
    }

    export проц списокРисСостояния(СписокРисунков значение)
    {
        wxTreeCtrl_SetStateImageList(вхобъ, ВизОбъект.безопУк(значение));
    }

    //---------------------------------------------------------------------

    /*export СписокРисунков ButtonsImageList
    {
    	get { return (СписокРисунков)найдиОбъект(wxTreeCtrl_GetButtonsImageList(вхобъ), typeid(СписокРисунков)); }

    	set { wxTreeCtrl_SetButtonsImageList(вхобъ, ВизОбъект.безопУк(значение)); }
    }*/

    //---------------------------------------------------------------------

    export проц устРисунокЭлта(ИдЭлтаДерева элт, цел рисунок)
    {
        устРисунокЭлта(элт, рисунок, ПИконкаЭлтаДерева.Нормальный);
    }

    export проц устРисунокЭлта(ИдЭлтаДерева элт, цел рисунок, ПИконкаЭлтаДерева который)
    {
        wxTreeCtrl_SetItemImage(вхобъ, ВизОбъект.безопУк(элт), рисунок, который);
    }

    //---------------------------------------------------------------------

    export цел дайРисунокЭлта(ИдЭлтаДерева элт)
    {
        return дайРисунокЭлта(элт, ПИконкаЭлтаДерева.Нормальный);
    }

    export цел дайРисунокЭлта(ИдЭлтаДерева элт, ПИконкаЭлтаДерева который)
    {
        return wxTreeCtrl_GetItemImage(вхобъ, ВизОбъект.безопУк(элт), который);
    }

    //---------------------------------------------------------------------

    export проц удалиВсеЭлты()
    {
        wxTreeCtrl_DeleteAllItems(вхобъ);
    }

    export проц удали(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_Delete(вхобъ, ВизОбъект.безопУк(элт));
    }

    export проц удалиОтпрыски(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_DeleteChildren(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export проц отмениВыделение()
    {
        wxTreeCtrl_Unselect(вхобъ);
    }

    export проц отмениВыделениеВсех()
    {
        wxTreeCtrl_UnselectAll(вхобъ);
    }

    //---------------------------------------------------------------------

    export бул выделен(ИдЭлтаДерева элт)
    {
        return wxTreeCtrl_IsSelected(вхобъ, ВизОбъект.безопУк(элт));
    }

    export проц выделиЭлт(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_SelectItem(вхобъ, ВизОбъект.безопУк(элт));
    }

    export ИдЭлтаДерева выделение()
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetSelection(вхобъ), да);
    }
    export проц выделение(ИдЭлтаДерева значение)
    {
        выделиЭлт(значение);
    }

    //---------------------------------------------------------------------

    export проц устТекстЭлта(ИдЭлтаДерева элт, ткст текст)
    {
        wxTreeCtrl_SetItemText(вхобъ, ВизОбъект.безопУк(элт), текст);
    }

    export ткст дайТекстЭлта(ИдЭлтаДерева элт)
    {
        return cast(ткст) new ВизТкст(wxTreeCtrl_GetItemText(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export проц устДанныеЭлта(ИдЭлтаДерева элт, ДанныеЭлтаДерева данные)
    {
        wxTreeCtrl_SetItemData(вхобъ, ВизОбъект.безопУк(элт), ВизОбъект.безопУк(данные));
    }

    export ДанныеЭлтаДерева дайДанныеЭлта(ИдЭлтаДерева элт)
    {
        return cast(ДанныеЭлтаДерева)ВизОбъект.найдиОбъект(wxTreeCtrl_GetItemData(вхобъ, ВизОбъект.безопУк(элт)));
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева тестНажатия(Точка тчк, out цел флаги)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_HitTest(вхобъ, тчк, флаги), да);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева корневойЭлт()
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetRootItem(вхобъ), да);
    }

    export ИдЭлтаДерева дайРодителяЭлта(ИдЭлтаДерева элт)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetItemParent(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева дайПервОтпрыск(ИдЭлтаДерева элт, inout ЦелУкз куки)
    {
        ИдЭлтаДерева ид = new ИдЭлтаДерева(wxTreeCtrl_GetFirstChild(вхобъ, ВизОбъект.безопУк(элт)), да);

        куки = wxTreeCtrl_GetMyCookie(вхобъ);

        return ид;
    }

    export ИдЭлтаДерева дайСледщОтпрыск(ИдЭлтаДерева элт, inout ЦелУкз куки)
    {
        wxTreeCtrl_SetMyCookie(вхобъ, куки);

        ИдЭлтаДерева ид = new ИдЭлтаДерева(wxTreeCtrl_GetNextChild(вхобъ, ВизОбъект.безопУк(элт)), да);

        куки =  wxTreeCtrl_GetMyCookie(вхобъ);

        return ид;
    }

    export ИдЭлтаДерева дайПоследнОтпрыск(ИдЭлтаДерева элт)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetLastChild(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева дайСледщПасынок(ИдЭлтаДерева элт)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetNextSibling(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    export ИдЭлтаДерева дайПредшПасынок(ИдЭлтаДерева элт)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetPrevSibling(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева дайПервВидимЭлт()
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetFirstVisibleItem(вхобъ), да);
    }

    export ИдЭлтаДерева дайСледщВидимый(ИдЭлтаДерева элт)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetNextVisible(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    export ИдЭлтаДерева дайПредшВидимый(ИдЭлтаДерева элт)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_GetPrevVisible(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export проц раскрой(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_Expand(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export проц схлопни(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_Collapse(вхобъ, ВизОбъект.безопУк(элт));
    }

    export проц схлопниИСбрось(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_CollapseAndReset(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export проц переключи(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_Toggle(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export проц убедисьЧтоВиден(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_EnsureVisible(вхобъ, ВизОбъект.безопУк(элт));
    }

    export проц промотайДо(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_ScrollTo(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export цел дайЧлоОтпрысков(ИдЭлтаДерева элт)
    {
        return дайЧлоОтпрысков(элт, да);
    }

    export цел дайЧлоОтпрысков(ИдЭлтаДерева элт, бул рекурсивно)
    {
        return wxTreeCtrl_GetChildrenCount(вхобъ, ВизОбъект.безопУк(элт), рекурсивно);
    }

    export цел счёт()
    {
        return wxTreeCtrl_GetCount(вхобъ);
    }

    //---------------------------------------------------------------------

    export бул виден(ИдЭлтаДерева элт)
    {
        return wxTreeCtrl_IsVisible(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export бул уЭлтаЕстьОтпрыски(ИдЭлтаДерева элт)
    {
        return wxTreeCtrl_ItemHasChildren(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export бул развёрнут(ИдЭлтаДерева элт)
    {
        return wxTreeCtrl_IsExpanded(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export бул естьОтпрыски(ИдЭлтаДерева элт)
    {
        return дайЧлоОтпрысков(элт, нет) > 0;
    }

    // A brute сила way до get list of selections (if МНОЖЕСТВЕННЫЙ есть been
    // enabled) by inspecting each элт. May want до replace with Interop
    // invocation of GetSelections() if it is implemented more efficiently
    // (such as the ДеревоКтрл есть a built-in list of currect selections).
    export ИдЭлтаДерева[] прежднВыделения()
    {
        return Get_Items(ПРежимПолученияЭлтов.Выделения, this.корневойЭлт, да);
    }

    // This is now interop...
    export ИдЭлтаДерева[] выделения()
    {
        return (new ИдыЭлтовМассиваДерева(wxTreeCtrl_GetSelections(вхобъ), да)).вМассив();
    }

    // This is an addition до the standard API. Limits the selection
    // search до родитЭлт and below.
    export ИдЭлтаДерева[] выделенияНаИлиНиже(ИдЭлтаДерева родитЭлт)
    {
        return Get_Items(ПРежимПолученияЭлтов.Выделения, родитЭлт, нет);
    }

    // This is an addition до the standard API. Limits the selection
    // search до those элты below родитЭлт.
    export ИдЭлтаДерева[] выделенияНиже(ИдЭлтаДерева родитЭлт)
    {
        return Get_Items(ПРежимПолученияЭлтов.Выделения, родитЭлт, да);
    }

    // This is an addition до the standard API. Returns all элты
    // except for the root node.
    export ИдЭлтаДерева[] всеЭлты()
    {
        return Get_Items(ПРежимПолученияЭлтов.Все, this.корневойЭлт, да);
    }

    // This is an addition до the standard API. Only returns элты
    // that are at or below родитЭлт (i.e. returns родитЭлт).
    export ИдЭлтаДерева[] всеЭлтыНаИлиНиже(ИдЭлтаДерева родитЭлт)
    {
        return Get_Items(ПРежимПолученияЭлтов.Все, родитЭлт, нет);
    }

    // This is an addition до the standard API. Only returns элты
    // that are below родитЭлт.
    export ИдЭлтаДерева[] всеЭлтыНиже(ИдЭлтаДерева родитЭлт)
    {
        return Get_Items(ПРежимПолученияЭлтов.Все, родитЭлт, да);
    }

    private enum ПРежимПолученияЭлтов
    {
        Выделения,
        Все,
    }

    private ИдЭлтаДерева[] Get_Items(ПРежимПолученияЭлтов режим, ИдЭлтаДерева родитЭлт,
                                   бул skip_parent)
    {
        // Console.WriteLine("---");
        ИдЭлтаДерева[] list;
        Add_Items(режим, родитЭлт, list, ЦелУкз.init, skip_parent);
        return list;
    }

    private проц Add_Items(ПРежимПолученияЭлтов режим, ИдЭлтаДерева родитель,
                           ИдЭлтаДерева[] list, ЦелУкз куки, бул skip_parent)
    {
        ИдЭлтаДерева ид;

        if ( куки == ЦелУкз.init)
        {
            if ( (! skip_parent) &&
                    ((режим == ПРежимПолученияЭлтов.Все) || (this.выделен(родитель))))
            {
                // Console.WriteLine(this.дайТекстЭлта(родитель));
                list ~= родитель;
            }
            ид = дайПервОтпрыск(родитель, куки);
        }
        else
        {
            ид = дайСледщОтпрыск(родитель, куки);
        }

        if ( ! ид.Ок() )
            return;

        if ((режим == ПРежимПолученияЭлтов.Все) || (this.выделен(ид)))
        {
            // Console.WriteLine(this.дайТекстЭлта(ид));
            list ~= ид;
        }

        if (уЭлтаЕстьОтпрыски(ид))
        {
            Add_Items(режим, ид, list, ЦелУкз.init, нет);
        }

        Add_Items(режим, родитель, list, куки, нет);
    }

    //---------------------------------------------------------------------

    export бцел отступ()
    {
        return wxTreeCtrl_GetIndent(вхобъ);
    }
    export проц отступ(бцел значение)
    {
        wxTreeCtrl_SetIndent(вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export бцел спейсинг()
    {
        return wxTreeCtrl_GetSpacing(вхобъ);
    }
    export проц спейсинг(бцел значение)
    {
        wxTreeCtrl_SetSpacing(вхобъ, значение);
    }

    //---------------------------------------------------------------------

    export Цвет дайЦветТекстаЭлта(ИдЭлтаДерева элт)
    {
        return new Цвет(wxTreeCtrl_GetItemTextColour(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export Цвет дайЦветФонаЭлта(ИдЭлтаДерева элт)
    {
        return new Цвет(wxTreeCtrl_GetItemBackgroundColour(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    //---------------------------------------------------------------------

    export Шрифт дайШрифтЭлта(ИдЭлтаДерева элт)
    {
        return new Шрифт(wxTreeCtrl_GetItemFont(вхобъ, ВизОбъект.безопУк(элт)), да);
    }

    export проц устШрифтЭлта(ИдЭлтаДерева элт, Шрифт шрифт)
    {
        wxTreeCtrl_SetItemFont(вхобъ, ВизОбъект.безопУк(элт), ВизОбъект.безопУк(шрифт));
    }

    //---------------------------------------------------------------------

    export проц устУЭлтаЕстьОтпрыски(ИдЭлтаДерева элт)
    {
        устУЭлтаЕстьОтпрыски(элт, да);
    }

    export проц устУЭлтаЕстьОтпрыски(ИдЭлтаДерева элт, бул есть)
    {
        wxTreeCtrl_SetItemHasChildren(вхобъ, ВизОбъект.безопУк(элт), есть);
    }

    //---------------------------------------------------------------------

    export проц устУЭлтПолужирный(ИдЭлтаДерева элт)
    {
        устУЭлтПолужирный(элт, да);
    }

    export проц устУЭлтПолужирный(ИдЭлтаДерева элт, бул полужирный)
    {
        wxTreeCtrl_SetItemBold(вхобъ, ВизОбъект.безопУк(элт), полужирный);
    }

    //---------------------------------------------------------------------

    export проц устЦветТекстаЭлта(ИдЭлтаДерева элт, Цвет кол)
    {
        wxTreeCtrl_SetItemTextColour(вхобъ, ВизОбъект.безопУк(элт), ВизОбъект.безопУк(кол));
    }

    //---------------------------------------------------------------------

    export проц устЦветФонаТекстаЭлта(ИдЭлтаДерева элт, Цвет кол)
    {
        wxTreeCtrl_SetItemBackgroundColour(вхобъ, ВизОбъект.безопУк(элт), ВизОбъект.безопУк(кол));
    }

    //---------------------------------------------------------------------

    export проц редактируйНадпись(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_EditLabel(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export бул дайОгранПрям(ИдЭлтаДерева элт, inout Прямоугольник прям)
    {
        return дайОгранПрям(элт, прям, нет);
    }

    export бул дайОгранПрям(ИдЭлтаДерева элт, inout Прямоугольник прям, бул толькоТекст)
    {
        return wxTreeCtrl_GetBoundingRect(вхобъ, ВизОбъект.безопУк(элт), прям, толькоТекст);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, ИдЭлтаДерева предш, ткст текст)
    {
        return вставьЭлт(родитель, предш, текст, -1, -1, пусто);
    }

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, ИдЭлтаДерева предш, ткст текст, цел рисунок)
    {
        return вставьЭлт(родитель, предш, текст, рисунок, -1, пусто);
    }

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, ИдЭлтаДерева предш, ткст текст, цел рисунок, цел рисунокВыд)
    {
        return вставьЭлт(родитель, предш, текст, рисунок, рисунокВыд, пусто);
    }

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, ИдЭлтаДерева предш, ткст текст, цел рисунок, цел рисунокВыд, ДанныеЭлтаДерева данные)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_InsertItem(вхобъ, ВизОбъект.безопУк(родитель), ВизОбъект.безопУк(предш), текст, рисунок, рисунокВыд, ВизОбъект.безопУк(данные)), да);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, цел перед, ткст текст)
    {
        return вставьЭлт(родитель, перед, текст, -1, -1, пусто);
    }

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, цел перед, ткст текст, цел рисунок)
    {
        return вставьЭлт(родитель, перед, текст, рисунок, -1, пусто);
    }

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, цел перед, ткст текст, цел рисунок, цел рисунокВыд)
    {
        return вставьЭлт(родитель, перед, текст, рисунок, рисунокВыд, пусто);
    }

    export ИдЭлтаДерева вставьЭлт(ИдЭлтаДерева родитель, цел перед, ткст текст, цел рисунок, цел рисунокВыд, ДанныеЭлтаДерева данные)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_InsertItem2(вхобъ, ВизОбъект.безопУк(родитель), перед, текст, рисунок, рисунокВыд, ВизОбъект.безопУк(данные)), да);
    }

    //---------------------------------------------------------------------

    export бул полужирный(ИдЭлтаДерева элт)
    {
        return wxTreeCtrl_IsBold(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева подставьЭлт(ИдЭлтаДерева родитель, ткст текст)
    {
        return подставьЭлт(родитель, текст, -1, -1, пусто);
    }

    export ИдЭлтаДерева подставьЭлт(ИдЭлтаДерева родитель, ткст текст, цел рисунок)
    {
        return подставьЭлт(родитель, текст, рисунок, -1, пусто);
    }

    export ИдЭлтаДерева подставьЭлт(ИдЭлтаДерева родитель, ткст текст, цел рисунок, цел рисунокВыд)
    {
        return подставьЭлт(родитель, текст, рисунок, рисунокВыд, пусто);
    }

    export ИдЭлтаДерева подставьЭлт(ИдЭлтаДерева родитель, ткст текст, цел рисунок, цел рисунокВыд, ДанныеЭлтаДерева данные)
    {
        return new ИдЭлтаДерева(wxTreeCtrl_PrependItem(вхобъ, ВизОбъект.безопУк(родитель), текст, рисунок, рисунокВыд, ВизОбъект.безопУк(данные)), да);
    }

    //---------------------------------------------------------------------

    export проц устРисунокВыделенЭлта(ИдЭлтаДерева элт, цел выделенРис)
    {
        wxTreeCtrl_SetItemSelectedImage(вхобъ, ВизОбъект.безопУк(элт), выделенРис);
    }

    //---------------------------------------------------------------------

    export проц переключиВыделениеЭлта(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_ToggleItemSelection(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export проц отмениВыделениеЭлта(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_UnselectItem(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------

    export проц сортируйОтпрыски(ИдЭлтаДерева элт)
    {
        wxTreeCtrl_SortChildren(вхобъ, ВизОбъект.безопУк(элт));
    }

    //---------------------------------------------------------------------
    export проц BeginDrag_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_ТЯГА, ид, значение, this);
    }
    export проц BeginDrag_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц BeginRightDrag_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_ПТЯГА, ид, значение, this);
    }
    export проц BeginRightDrag_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц BeginLabelEdit_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_РЕДАКТИРОВАНИЯ_ЯРЛЫКА, ид, значение, this);
    }
    export проц BeginLabelEdit_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц EndLabelEdit_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_КОНЕЦ_РЕДАКТИРОВАНИЯ_ЯРЛЫКА, ид, значение, this);
    }
    export проц EndLabelEdit_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц DeleteItem_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_УДАЛИТЬ_ЭЛЕМЕНТ, ид, значение, this);
    }
    export проц DeleteItem_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц GetInfo_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ДАТЬ_ИНФО, ид, значение, this);
    }
    export проц GetInfo_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц SetInfo_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_УСТ_ИНФО, ид, значение, this);
    }
    export проц SetInfo_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemExpand_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_РАЗВЁРНУТ, ид, значение, this);
    }
    export проц ItemExpand_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemExpanding_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_РАЗВОРАЧИВАЕТСЯ, ид, значение, this);
    }
    export проц ItemExpanding_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemCollapse_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_СВЁРНУТ, ид, значение, this);
    }
    export проц ItemCollapse_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemCollapsing_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_СВОРАЧИВАЕТСЯ, ид, значение, this);
    }
    export проц ItemCollapsing_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц добавьИзменениеВыбора(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ВЫД_ИЗМЕНЕНО, ид, значение, this);
    }
    export проц удалиИзменениеВыбора(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц SelectionChanging_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ВЫД_ИЗМЕНЯЕТСЯ, ид, значение, this);
    }
    export проц SelectionChanging_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export override проц KeyDown_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_КЛАВИША_ВНИЗУ, ид, значение, this);
    }
    export override проц KeyDown_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemActivate_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_АКТИВИРОВАН, ид, значение, this);
    }
    export проц ItemActivate_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemRightClick_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_ПРАВАЯ_НАЖАТА, ид, значение, this);
    }
    export проц ItemRightClick_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц ItemMiddleClick_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_СРЕДНЯЯ_НАЖАТА, ид, значение, this);
    }
    export проц ItemMiddleClick_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

    export проц EndDrag_Add(ДатчикСобытий значение)
    {
        добавьДатчикКоманд(Событие.Тип.СОБ_КОМАНДА_ДЕРЕВО_КОНЕЦ_ТЯГА, ид, значение, this);
    }
    export проц EndDrag_Remove(ДатчикСобытий значение)
    {
        удалиОбработчик(значение, this);
    }

}

//-----------------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxTreeEvent_ctor(цел типКоманды, цел ид);
extern (C) ЦелУкз wxTreeEvent_GetItem(ЦелУкз сам);
extern (C) проц   wxTreeEvent_SetItem(ЦелУкз сам, ЦелУкз элт);
extern (C) ЦелУкз wxTreeEvent_GetOldItem(ЦелУкз сам);
extern (C) проц   wxTreeEvent_SetOldItem(ЦелУкз сам, ЦелУкз элт);
extern (C) проц   wxTreeEvent_GetPoint(ЦелУкз сам, inout Точка тчк);
extern (C) проц   wxTreeEvent_SetPoint(ЦелУкз сам, inout Точка тчк);
extern (C) ЦелУкз wxTreeEvent_GetKeyEvent(ЦелУкз сам);
extern (C) цел    wxTreeEvent_GetKeyCode(ЦелУкз сам);
extern (C) проц   wxTreeEvent_SetKeyEvent(ЦелУкз сам, ЦелУкз соб);
extern (C) ЦелУкз wxTreeEvent_GetLabel(ЦелУкз сам);
extern (C) проц   wxTreeEvent_SetLabel(ЦелУкз сам, ткст ярлык);
extern (C) бул   wxTreeEvent_IsEditCancelled(ЦелУкз сам);
extern (C) проц   wxTreeEvent_SetEditCanceled(ЦелУкз сам, бул editCancelled);
//extern (C) цел    wxTreeEvent_GetCode(ЦелУкз сам);
extern (C) проц   wxTreeEvent_Veto(ЦелУкз сам);
extern (C) проц   wxTreeEvent_Allow(ЦелУкз сам);
extern (C) бул   wxTreeEvent_IsAllowed(ЦелУкз сам);

extern (C) проц   wxTreeEvent_SetToolTip(ЦелУкз сам, ткст тултип);
//! \endcond

//-----------------------------------------------------------------------------


export class СобытиеДерева : Событие
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }
    export this(цел типКоманды, цел ид)
    {
        super(wxTreeEvent_ctor(типКоманды, ид));
    }

    //-----------------------------------------------------------------------------

    export ИдЭлтаДерева элт()
    {
        return new ИдЭлтаДерева(wxTreeEvent_GetItem(вхобъ), да);
    }
    export проц элт(ИдЭлтаДерева значение)
    {
        wxTreeEvent_SetItem(вхобъ, ВизОбъект.безопУк(значение));
    }

    export ИдЭлтаДерева прежднЭлт()
    {
        return new ИдЭлтаДерева(wxTreeEvent_GetOldItem(вхобъ), да);
    }
    export проц прежднЭлт(ИдЭлтаДерева значение)
    {
        wxTreeEvent_SetOldItem(вхобъ, ВизОбъект.безопУк(значение));
    }

    //-----------------------------------------------------------------------------

    export Точка точка()
    {
        Точка тчк;
        wxTreeEvent_GetPoint(вхобъ, тчк);
        return тчк;
    }
    export проц точка(Точка значение)
    {
        wxTreeEvent_SetPoint(вхобъ, значение);
    }

    //-----------------------------------------------------------------------------

    export СобытиеКлавиатуры собКлавиатуры()
    {
        return cast(СобытиеКлавиатуры)найдиОбъект(wxTreeEvent_GetKeyEvent(вхобъ), cast(ВизОбъект function(ЦелУкз ptr))&СобытиеКлавиатуры.Нов);
    }
    export проц собКлавиатуры(СобытиеКлавиатуры значение)
    {
        wxTreeEvent_SetKeyEvent(вхобъ, ВизОбъект.безопУк(значение));
    }

    //-----------------------------------------------------------------------------

    export цел кодКл()
    {
        return wxTreeEvent_GetKeyCode(вхобъ);
    }

    //-----------------------------------------------------------------------------

    export ткст ярлык()
    {
        return cast(ткст) new ВизТкст(wxTreeEvent_GetLabel(вхобъ), да);
    }
    export проц ярлык(ткст значение)
    {
        wxTreeEvent_SetLabel(вхобъ, значение);
    }

    //-----------------------------------------------------------------------------

    export бул редактированиеОтменено()
    {
        return wxTreeEvent_IsEditCancelled(вхобъ);
    }
    export проц редактированиеОтменено(бул значение)
    {
        wxTreeEvent_SetEditCanceled(вхобъ, значение);
    }

    export проц тултип(ткст значение)
    {
        wxTreeEvent_SetToolTip(вхобъ, значение);
    }

    //-----------------------------------------------------------------------------

    export проц запрет()
    {
        wxTreeEvent_Veto(вхобъ);
    }

    //-----------------------------------------------------------------------------

    export проц позволить()
    {
        wxTreeEvent_Allow(вхобъ);
    }

    //-----------------------------------------------------------------------------

    export бул позволено()
    {
        return  wxTreeEvent_IsAllowed(вхобъ);
    }

    private static Событие Нов(ЦелУкз объ)
    {
        return new СобытиеДерева(объ);
    }

    static this()
    {
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_ТЯГА = wxEvent_EVT_COMMAND_TREE_BEGIN_DRAG();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_ПТЯГА = wxEvent_EVT_COMMAND_TREE_BEGIN_RDRAG();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_РЕДАКТИРОВАНИЯ_ЯРЛЫКА = wxEvent_EVT_COMMAND_TREE_BEGIN_LABEL_EDIT();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_КОНЕЦ_РЕДАКТИРОВАНИЯ_ЯРЛЫКА = wxEvent_EVT_COMMAND_TREE_END_LABEL_EDIT();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_УДАЛИТЬ_ЭЛЕМЕНТ = wxEvent_EVT_COMMAND_TREE_DELETE_ITEM();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ДАТЬ_ИНФО = wxEvent_EVT_COMMAND_TREE_GET_INFO();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_УСТ_ИНФО = wxEvent_EVT_COMMAND_TREE_SET_INFO();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_РАЗВЁРНУТ = wxEvent_EVT_COMMAND_TREE_ITEM_EXPANDED();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_РАЗВОРАЧИВАЕТСЯ = wxEvent_EVT_COMMAND_TREE_ITEM_EXPANDING();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_СВЁРНУТ = wxEvent_EVT_COMMAND_TREE_ITEM_COLLAPSED();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_СВОРАЧИВАЕТСЯ = wxEvent_EVT_COMMAND_TREE_ITEM_COLLAPSING();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ВЫД_ИЗМЕНЕНО = wxEvent_EVT_COMMAND_TREE_SEL_CHANGED();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ВЫД_ИЗМЕНЯЕТСЯ = wxEvent_EVT_COMMAND_TREE_SEL_CHANGING();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_КЛАВИША_ВНИЗУ = wxEvent_EVT_COMMAND_TREE_KEY_DOWN();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_АКТИВИРОВАН = wxEvent_EVT_COMMAND_TREE_ITEM_ACTIVATED();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ПРАВАЯ_НАЖАТА = wxEvent_EVT_COMMAND_TREE_ITEM_RIGHT_CLICK();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_СРЕДНЯЯ_НАЖАТА = wxEvent_EVT_COMMAND_TREE_ITEM_MIDDLE_CLICK();
        super.Тип.СОБ_КОМАНДА_ДЕРЕВО_КОНЕЦ_ТЯГА = wxEvent_EVT_COMMAND_TREE_END_DRAG();

        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_ТЯГА,         &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_ПТЯГА,        &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_НАЧАЛО_РЕДАКТИРОВАНИЯ_ЯРЛЫКА,   &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_КОНЕЦ_РЕДАКТИРОВАНИЯ_ЯРЛЫКА,     &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_УДАЛИТЬ_ЭЛЕМЕНТ,        &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ДАТЬ_ИНФО,           &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_УСТ_ИНФО,           &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_РАЗВЁРНУТ,      &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_РАЗВОРАЧИВАЕТСЯ,     &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_СВЁРНУТ,     &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_СВОРАЧИВАЕТСЯ,    &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ВЫД_ИЗМЕНЕНО,        &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ВЫД_ИЗМЕНЯЕТСЯ,       &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_КЛАВИША_ВНИЗУ,           &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ЭЛТ_АКТИВИРОВАН,     &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_ПРАВАЯ_НАЖАТА,   &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_СРЕДНЯЯ_НАЖАТА,  &СобытиеДерева.Нов);
        добавьТипСоб (super.Тип.СОБ_КОМАНДА_ДЕРЕВО_КОНЕЦ_ТЯГА,           &СобытиеДерева.Нов);
    }
}

//---------------------------------------------------------------------

//! \cond EXTERN
extern (C) ЦелУкз wxArrayTreeItemIds_ctor();
extern (C) проц   wxArrayTreeItemIds_dtor(ЦелУкз сам);
extern (C) проц   wxArrayTreeItemIds_RegisterDisposable(ЦелУкз сам, Virtual_Dispose onDispose);
extern (C) проц   wxArrayTreeItemIds_Add(ЦелУкз сам, ЦелУкз доб);
extern (C) ЦелУкз wxArrayTreeItemIds_Item(ЦелУкз сам, цел чис);
extern (C) цел    wxArrayTreeItemIds_GetCount(ЦелУкз сам);
//! \endcond

//---------------------------------------------------------------------


export class ИдыЭлтовМассиваДерева : ВизОбъект
{
    export this(ЦелУкз вхобъ)
    {
        super(вхобъ);
    }

    private this(ЦелУкз вхобъ, бул памСобств)
    {
        super(вхобъ);
        this.памСобств = памСобств;
    }

    export this()
    {
        this(wxArrayTreeItemIds_ctor(), да);
        wxArrayTreeItemIds_RegisterDisposable(вхобъ, &VirtualDispose);
    }

    //---------------------------------------------------------------------

    export ИдЭлтаДерева[] вМассив()
    {
        цел счёт = this.счёт();
        ИдЭлтаДерева[] tmps = new ИдЭлтаДерева[счёт];
        for (цел i = 0; i < счёт; i++)
            tmps[i] = this.элт(i);
        return tmps;
    }

    export ИдЭлтаДерева элт(цел чис)
    {
        return new ИдЭлтаДерева(wxArrayTreeItemIds_Item(вхобъ, чис), да);
    }

    export проц добавь(ИдЭлтаДерева доб)
    {
        wxArrayTreeItemIds_Add(вхобъ, ВизОбъект.безопУк(доб));
    }

    export цел счёт()
    {
        return wxArrayTreeItemIds_GetCount(вхобъ);
    }

    //---------------------------------------------------------------------

    override protected проц dtor()
    {
        wxArrayTreeItemIds_dtor(вхобъ);
    }
		//----------------------------
		export ~this(){this.dtor();}
	//----------------------------
}
